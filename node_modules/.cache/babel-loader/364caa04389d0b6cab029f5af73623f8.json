{"ast":null,"code":"class Api {\n  constructor(options) {\n    this.baseUrl = options.baseUrl;\n    this.headers = options.headers;\n  }\n\n  singIn(password, email) {\n    return fetch(`this.baseUrl + /signin`, {\n      method: 'POST',\n      headers: this.headers,\n      body: JSON.stringify({\n        \"password\": password,\n        \"email\": email\n      })\n    });\n  }\n\n  tokenCheck() {\n    return fetch(`this.baseUrl + /signin`, {\n      method: 'GET',\n      headers: this.headers\n    });\n  }\n\n  _checkFetch(res) {\n    if (res.ok) {\n      return res.json();\n    } else {\n      return Promise.reject(`Ошибка: ${res.status}`);\n    }\n  }\n\n  getUserData() {\n    //получаем данные пользователя\n    return fetch(this.baseUrl + \"/users/me\", {\n      headers: this.headers\n    }).then(res => {\n      return this._checkFetch(res);\n    });\n  }\n\n  getCards() {\n    //получаем данные карточек\n    return fetch(this.baseUrl + \"/cards\", {\n      headers: this.headers\n    }).then(res => {\n      return this._checkFetch(res);\n    });\n  }\n\n  patchUserData(name, about) {\n    //передаем данные пользователя\n    return fetch(this.baseUrl + \"/users/me\", {\n      method: \"PATCH\",\n      headers: this.headers,\n      body: JSON.stringify({\n        name: name,\n        about: about\n      })\n    }).then(res => {\n      return this._checkFetch(res);\n    });\n  }\n\n  patchCard(nameCard, linkCard) {\n    //передаем данные карточки созданные пользователем\n    return fetch(this.baseUrl + \"/cards\", {\n      method: \"POST\",\n      headers: this.headers,\n      body: JSON.stringify({\n        name: nameCard,\n        link: linkCard\n      })\n    }).then(res => {\n      return this._checkFetch(res);\n    });\n  }\n\n  deleteCard(cardId) {\n    //удаляем карточку пользователя\n    return fetch(this.baseUrl + \"/cards/\" + cardId, {\n      method: \"DELETE\",\n      headers: this.headers\n    }).then(res => {\n      return this._checkFetch(res);\n    });\n  }\n\n  addLike(cardId) {\n    //передаем лайки\n    return fetch(this.baseUrl + \"/cards/likes/\" + cardId, {\n      method: \"PUT\",\n      headers: this.headers\n    }).then(res => {\n      return this._checkFetch(res);\n    });\n  }\n\n  deleteLike(cardId) {\n    //удаляем лайки\n    return fetch(this.baseUrl + \"/cards/likes/\" + cardId, {\n      method: \"DELETE\",\n      headers: this.headers\n    }).then(res => {\n      return this._checkFetch(res);\n    });\n  }\n\n  patchAvatar(avatar) {\n    //передаем данные об аватаре\n    return fetch(this.baseUrl + \"/users/me/avatar\", {\n      method: \"PATCH\",\n      headers: this.headers,\n      body: JSON.stringify({\n        avatar: avatar\n      })\n    }).then(res => {\n      return this._checkFetch(res);\n    });\n  }\n\n}\n\nconst api = new Api({\n  baseUrl: \"https://nomoreparties.co/v1/cohort-28\",\n  headers: {\n    authorization: \"37a57185-a3c1-401e-aba8-ce2242497099\",\n    \"Content-Type\": \"application/json\"\n  }\n});\nconst authApi = new Api({\n  baseUrl: \"https://auth.nomoreparties.co\",\n  headers: {\n    \"Content-Type\": \"application/json\" //\"Authorization\" : `Bearer ${''}`\n\n  }\n});\nexport { api, authApi };\nexport default Api;","map":{"version":3,"sources":["/Users/dmitrijcernysev/Desktop/projects/react-mesto-auth/mesto-react/src/utils/Api.js"],"names":["Api","constructor","options","baseUrl","headers","singIn","password","email","fetch","method","body","JSON","stringify","tokenCheck","_checkFetch","res","ok","json","Promise","reject","status","getUserData","then","getCards","patchUserData","name","about","patchCard","nameCard","linkCard","link","deleteCard","cardId","addLike","deleteLike","patchAvatar","avatar","api","authorization","authApi"],"mappings":"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","sourcesContent":["\n\nclass Api {\n  constructor(options) {\n    this.baseUrl = options.baseUrl;\n    this.headers = options.headers;\n  }\n\n\n\n  singIn(password, email) {\n    return fetch(`this.baseUrl + /signin`,{\n      method: 'POST',\n      headers: this.headers,\n      body: JSON.stringify({\n        \"password\": password,\n        \"email\": email\n      })\n    })\n  }\n\n  tokenCheck() {\n    return fetch(`this.baseUrl + /signin`, {\n      method: 'GET',\n      headers: this.headers,\n    })\n  }\n\n  _checkFetch(res) {\n    if (res.ok) {\n      return res.json();\n    } else {\n      return Promise.reject(`Ошибка: ${res.status}`);\n    }\n  }\n\n  getUserData() {\n    //получаем данные пользователя\n    return fetch(this.baseUrl + \"/users/me\", {\n      headers: this.headers,\n    }).then((res) => {\n      return this._checkFetch(res);\n    });\n  }\n\n  getCards() {\n    //получаем данные карточек\n    return fetch(this.baseUrl + \"/cards\", {\n      headers: this.headers,\n    }).then((res) => {\n      return this._checkFetch(res);\n    });\n  }\n\n  patchUserData(name, about) {\n    //передаем данные пользователя\n    return fetch(this.baseUrl + \"/users/me\", {\n      method: \"PATCH\",\n      headers: this.headers,\n      body: JSON.stringify({\n        name: name,\n        about: about,\n      }),\n    }).then((res) => {\n      return this._checkFetch(res);\n    });\n  }\n\n\n\n\n\n  patchCard(nameCard, linkCard) {\n    //передаем данные карточки созданные пользователем\n    return fetch(this.baseUrl + \"/cards\", {\n      method: \"POST\",\n      headers: this.headers,\n      body: JSON.stringify({\n        name: nameCard,\n        link: linkCard,\n      }),\n    }).then((res) => {\n      return this._checkFetch(res);\n    });\n  }\n\n  deleteCard(cardId) {\n    //удаляем карточку пользователя\n    return fetch(this.baseUrl + \"/cards/\" + cardId, {\n      method: \"DELETE\",\n      headers: this.headers,\n    }).then((res) => {\n      return this._checkFetch(res);\n    });\n  }\n\n  addLike(cardId) {\n    //передаем лайки\n    return fetch(this.baseUrl + \"/cards/likes/\" + cardId, {\n      method: \"PUT\",\n      headers: this.headers,\n    }).then((res) => {\n      return this._checkFetch(res);\n    });\n  }\n\n  deleteLike(cardId) {\n    //удаляем лайки\n    return fetch(this.baseUrl + \"/cards/likes/\" + cardId, {\n      method: \"DELETE\",\n      headers: this.headers,\n    }).then((res) => {\n      return this._checkFetch(res);\n    });\n  }\n\n  patchAvatar(avatar) {\n    //передаем данные об аватаре\n    return fetch(this.baseUrl + \"/users/me/avatar\", {\n      method: \"PATCH\",\n      headers: this.headers,\n      body: JSON.stringify({\n        avatar: avatar,\n      }),\n    }).then((res) => {\n      return this._checkFetch(res);\n    });\n  }\n}\n\nconst api = new Api({\n  baseUrl: \"https://nomoreparties.co/v1/cohort-28\",\n  headers: {\n    authorization: \"37a57185-a3c1-401e-aba8-ce2242497099\",\n    \"Content-Type\": \"application/json\",\n  },\n});\n\n\n\nconst authApi = new Api({\n  baseUrl: \"https://auth.nomoreparties.co\",\n  headers: {\n    \"Content-Type\": \"application/json\"\n    //\"Authorization\" : `Bearer ${''}`\n  },\n})\n\nexport { api, authApi };\nexport default Api;\n"]},"metadata":{},"sourceType":"module"}