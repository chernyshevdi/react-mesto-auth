{"ast":null,"code":"class Api {\n  constructor(options) {\n    this.baseUrl = options.baseUrl;\n    this.headers = options.headers;\n  }\n\n  _checkFetch(res) {\n    if (res.ok) {\n      return res.json();\n    } else {\n      return Promise.reject(`Ошибка: ${res.status}`);\n    }\n  }\n\n  getUserData() {\n    //получаем данные пользователя\n    return fetch(this.baseUrl + '/users/me', {\n      headers: this.headers\n    }).then(res => {\n      return this._checkFetch(res);\n    });\n  }\n\n  getCards() {\n    //получаем данные карточек\n    return fetch(this.baseUrl + '/cards', {\n      headers: this.headers\n    }).then(res => {\n      return this._checkFetch(res);\n    });\n  }\n\n  patchUserData(name, about) {\n    //передаем данные пользователя\n    return fetch(this.baseUrl + '/users/me', {\n      method: 'PATCH',\n      headers: this.headers,\n      body: JSON.stringify({\n        name: name,\n        about: about\n      })\n    }).then(res => {\n      return this._checkFetch(res);\n    });\n  }\n\n  patchCard(nameCard, linkCard) {\n    //передаем данные карточки созданные пользователем\n    return fetch(this.baseUrl + '/cards', {\n      method: 'POST',\n      headers: this.headers,\n      body: JSON.stringify({\n        name: nameCard,\n        link: linkCard\n      })\n    }).then(res => {\n      return this._checkFetch(res);\n    });\n  }\n\n  deleteCard(cardId) {\n    //удаляем карточку пользователя\n    return fetch(this.baseUrl + '/cards/' + cardId, {\n      method: 'DELETE',\n      headers: this.headers\n    }).then(res => {\n      return this._checkFetch(res);\n    });\n  }\n\n  addLike(cardId) {\n    //передаем лайки\n    return fetch(this.baseUrl + '/cards/likes/' + cardId, {\n      method: 'PUT',\n      headers: this.headers\n    }).then(res => {\n      return this._checkFetch(res);\n    });\n  }\n\n  deleteLike(cardId) {\n    //удаляем лайки\n    return fetch(this.baseUrl + '/cards/likes/' + cardId, {\n      method: 'DELETE',\n      headers: this.headers\n    }).then(res => {\n      return this._checkFetch(res);\n    });\n  }\n\n  patchAvatar(avatar) {\n    //передаем данные об аватаре\n    return fetch(this.baseUrl + '/users/me/avatar', {\n      method: 'PATCH',\n      headers: this.headers,\n      body: JSON.stringify({\n        avatar: avatar\n      })\n    }).then(res => {\n      return this._checkFetch(res);\n    });\n  }\n\n}\n\nconst api = new Api({\n  baseUrl: 'https://nomoreparties.co/v1/cohort-28',\n  headers: {\n    authorization: '37a57185-a3c1-401e-aba8-ce2242497099',\n    'Content-Type': 'application/json'\n  }\n});\nexport { api };","map":{"version":3,"sources":["/Users/dmitrijcernysev/Desktop/projects/MestoReact/mesto-react/mesto-react/src/utils/Api.js"],"names":["Api","constructor","options","baseUrl","headers","_checkFetch","res","ok","json","Promise","reject","status","getUserData","fetch","then","getCards","patchUserData","name","about","method","body","JSON","stringify","patchCard","nameCard","linkCard","link","deleteCard","cardId","addLike","deleteLike","patchAvatar","avatar","api","authorization"],"mappings":"AAAC,MAAMA,GAAN,CAAU;AACTC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB,SAAKC,OAAL,GAAeD,OAAO,CAACC,OAAvB;AACA,SAAKC,OAAL,GAAeF,OAAO,CAACE,OAAvB;AACD;;AAGDC,EAAAA,WAAW,CAACC,GAAD,EAAM;AACb,QAAIA,GAAG,CAACC,EAAR,EAAY;AACV,aAAOD,GAAG,CAACE,IAAJ,EAAP;AACD,KAFD,MAGK;AACH,aAAOC,OAAO,CAACC,MAAR,CAAgB,WAAUJ,GAAG,CAACK,MAAO,EAArC,CAAP;AACD;AACJ;;AAEDC,EAAAA,WAAW,GAAG;AAAE;AACd,WAAOC,KAAK,CAAC,KAAKV,OAAL,GAAe,WAAhB,EAA6B;AACvCC,MAAAA,OAAO,EAAE,KAAKA;AADyB,KAA7B,CAAL,CAGJU,IAHI,CAGCR,GAAG,IAAI;AACZ,aAAO,KAAKD,WAAL,CAAiBC,GAAjB,CAAP;AACA,KALI,CAAP;AAMD;;AAEDS,EAAAA,QAAQ,GAAG;AAAE;AACX,WAAOF,KAAK,CAAC,KAAKV,OAAL,GAAe,QAAhB,EAA0B;AACpCC,MAAAA,OAAO,EAAE,KAAKA;AADsB,KAA1B,CAAL,CAGNU,IAHM,CAGDR,GAAG,IAAI;AACX,aAAO,KAAKD,WAAL,CAAiBC,GAAjB,CAAP;AACD,KALM,CAAP;AAMD;;AAEDU,EAAAA,aAAa,CAACC,IAAD,EAAOC,KAAP,EAAc;AAAE;AAC3B,WAAOL,KAAK,CAAC,KAAKV,OAAL,GAAe,WAAhB,EAA6B;AACvCgB,MAAAA,MAAM,EAAE,OAD+B;AAEvCf,MAAAA,OAAO,EAAE,KAAKA,OAFyB;AAGvCgB,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBL,QAAAA,IAAI,EAAEA,IADa;AAEnBC,QAAAA,KAAK,EAAEA;AAFY,OAAf;AAHiC,KAA7B,CAAL,CAQNJ,IARM,CAQDR,GAAG,IAAI;AACX,aAAO,KAAKD,WAAL,CAAiBC,GAAjB,CAAP;AACD,KAVM,CAAP;AAWD;;AAEDiB,EAAAA,SAAS,CAACC,QAAD,EAAWC,QAAX,EAAqB;AAAG;AAC/B,WAAOZ,KAAK,CAAC,KAAKV,OAAL,GAAe,QAAhB,EAA0B;AACpCgB,MAAAA,MAAM,EAAE,MAD4B;AAEpCf,MAAAA,OAAO,EAAE,KAAKA,OAFsB;AAGpCgB,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBL,QAAAA,IAAI,EAAEO,QADa;AAEnBE,QAAAA,IAAI,EAAED;AAFa,OAAf;AAH8B,KAA1B,CAAL,CAQNX,IARM,CAQDR,GAAG,IAAI;AACX,aAAO,KAAKD,WAAL,CAAiBC,GAAjB,CAAP;AACD,KAVM,CAAP;AAWD;;AAEDqB,EAAAA,UAAU,CAACC,MAAD,EAAS;AAAE;AACnB,WAAOf,KAAK,CAAC,KAAKV,OAAL,GAAe,SAAf,GAA2ByB,MAA5B,EAAoC;AAC9CT,MAAAA,MAAM,EAAE,QADsC;AAE9Cf,MAAAA,OAAO,EAAE,KAAKA;AAFgC,KAApC,CAAL,CAINU,IAJM,CAIDR,GAAG,IAAI;AACX,aAAO,KAAKD,WAAL,CAAiBC,GAAjB,CAAP;AACD,KANM,CAAP;AAOD;;AAEDuB,EAAAA,OAAO,CAACD,MAAD,EAAS;AAAE;AAChB,WAAOf,KAAK,CAAC,KAAKV,OAAL,GAAe,eAAf,GAAiCyB,MAAlC,EAA0C;AACpDT,MAAAA,MAAM,EAAE,KAD4C;AAEpDf,MAAAA,OAAO,EAAE,KAAKA;AAFsC,KAA1C,CAAL,CAINU,IAJM,CAIDR,GAAG,IAAI;AACX,aAAO,KAAKD,WAAL,CAAiBC,GAAjB,CAAP;AACD,KANM,CAAP;AAOD;;AAEDwB,EAAAA,UAAU,CAACF,MAAD,EAAS;AAAE;AACnB,WAAOf,KAAK,CAAC,KAAKV,OAAL,GAAe,eAAf,GAAiCyB,MAAlC,EAA0C;AACpDT,MAAAA,MAAM,EAAE,QAD4C;AAEpDf,MAAAA,OAAO,EAAE,KAAKA;AAFsC,KAA1C,CAAL,CAINU,IAJM,CAIDR,GAAG,IAAI;AACX,aAAO,KAAKD,WAAL,CAAiBC,GAAjB,CAAP;AACD,KANM,CAAP;AAOD;;AAEDyB,EAAAA,WAAW,CAACC,MAAD,EAAS;AAAE;AACpB,WAAOnB,KAAK,CAAC,KAAKV,OAAL,GAAe,kBAAhB,EAAmC;AAC7CgB,MAAAA,MAAM,EAAE,OADqC;AAE7Cf,MAAAA,OAAO,EAAE,KAAKA,OAF+B;AAG7CgB,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBU,QAAAA,MAAM,EAAEA;AADW,OAAf;AAHuC,KAAnC,CAAL,CAONlB,IAPM,CAODR,GAAG,IAAI;AACX,aAAO,KAAKD,WAAL,CAAiBC,GAAjB,CAAP;AACD,KATM,CAAP;AAUD;;AAvGQ;;AA0GX,MAAM2B,GAAG,GAAG,IAAIjC,GAAJ,CAAQ;AAClBG,EAAAA,OAAO,EAAE,uCADS;AAElBC,EAAAA,OAAO,EAAE;AACP8B,IAAAA,aAAa,EAAE,sCADR;AAEP,oBAAgB;AAFT;AAFS,CAAR,CAAZ;AAQA,SAAQD,GAAR","sourcesContent":[" class Api {\n  constructor(options) {\n    this.baseUrl = options.baseUrl;\n    this.headers = options.headers;\n  }\n\n\n  _checkFetch(res) {\n      if (res.ok) {\n        return res.json();\n      }\n      else {\n        return Promise.reject(`Ошибка: ${res.status}`);\n      }\n  }\n\n  getUserData() { //получаем данные пользователя\n    return fetch(this.baseUrl + '/users/me', {\n      headers: this.headers\n      })\n      .then(res => {\n       return this._checkFetch(res)\n      })\n  }\n\n  getCards() { //получаем данные карточек\n    return fetch(this.baseUrl + '/cards', {\n      headers: this.headers\n    })\n    .then(res => {\n      return this._checkFetch(res)\n    })\n  }\n\n  patchUserData(name, about) { //передаем данные пользователя\n    return fetch(this.baseUrl + '/users/me', {\n      method: 'PATCH',\n      headers: this.headers,\n      body: JSON.stringify({\n        name: name,\n        about: about\n      })\n    })\n    .then(res => {\n      return this._checkFetch(res)\n    })\n  }\n\n  patchCard(nameCard, linkCard) {  //передаем данные карточки созданные пользователем\n    return fetch(this.baseUrl + '/cards', {\n      method: 'POST',\n      headers: this.headers,\n      body: JSON.stringify({\n        name: nameCard,\n        link: linkCard\n      })\n    })\n    .then(res => {\n      return this._checkFetch(res)\n    })\n  }\n\n  deleteCard(cardId) { //удаляем карточку пользователя\n    return fetch(this.baseUrl + '/cards/' + cardId, {\n      method: 'DELETE',\n      headers: this.headers\n    })\n    .then(res => {\n      return this._checkFetch(res)\n    })\n  }\n\n  addLike(cardId) { //передаем лайки\n    return fetch(this.baseUrl + '/cards/likes/' + cardId, {\n      method: 'PUT',\n      headers: this.headers\n    })\n    .then(res => {\n      return this._checkFetch(res)\n    })\n  }\n\n  deleteLike(cardId) { //удаляем лайки\n    return fetch(this.baseUrl + '/cards/likes/' + cardId, {\n      method: 'DELETE',\n      headers: this.headers\n    })\n    .then(res => {\n      return this._checkFetch(res)\n    })\n  }\n\n  patchAvatar(avatar) { //передаем данные об аватаре\n    return fetch(this.baseUrl + '/users/me/avatar',{\n      method: 'PATCH',\n      headers: this.headers,\n      body: JSON.stringify({\n        avatar: avatar\n      })\n    })\n    .then(res => {\n      return this._checkFetch(res)\n    })\n  }\n}\n\nconst api = new Api({\n  baseUrl: 'https://nomoreparties.co/v1/cohort-28',\n  headers: {\n    authorization: '37a57185-a3c1-401e-aba8-ce2242497099',\n    'Content-Type': 'application/json'\n  }\n})\n\nexport {api}\n"]},"metadata":{},"sourceType":"module"}