{"ast":null,"code":"//import {BASE_URL} from \"../utils/constants\"\nclass Api {\n  constructor(options) {\n    this.baseUrl = options.baseUrl;\n    this.headers = options.headers;\n  }\n  /*singUp(password, email) {\n    return fetch(`${BASE_URL}/signup`, {\n      method: 'POST',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        \"password\": password,\n        \"email\": email\n      })\n    })\n  }\n   singIn(password, email) {\n    return fetch(`${BASE_URL}/signin`,{\n      method: 'POST',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        \"password\": password,\n        \"email\": email\n      })\n    })\n  }\n   tokenCheck() {\n    return fetch(`${BASE_URL}/signin`, {\n      method: 'GET',\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\" : `Bearer ${''}`\n      }\n    })\n  }\n   _checkFetch(res) {\n    if (res.ok) {\n      return res.json();\n    } else {\n      return Promise.reject(`Ошибка: ${res.status}`);\n    }\n  }*/\n\n\n  getUserData() {\n    //получаем данные пользователя\n    return fetch(this.baseUrl + \"/users/me\", {\n      headers: this.headers\n    }).then(res => {\n      return this._checkFetch(res);\n    });\n  }\n\n  getCards() {\n    //получаем данные карточек\n    return fetch(this.baseUrl + \"/cards\", {\n      headers: this.headers\n    }).then(res => {\n      return this._checkFetch(res);\n    });\n  }\n\n  patchUserData(name, about) {\n    //передаем данные пользователя\n    return fetch(this.baseUrl + \"/users/me\", {\n      method: \"PATCH\",\n      headers: this.headers,\n      body: JSON.stringify({\n        name: name,\n        about: about\n      })\n    }).then(res => {\n      return this._checkFetch(res);\n    });\n  }\n\n  patchCard(nameCard, linkCard) {\n    //передаем данные карточки созданные пользователем\n    return fetch(this.baseUrl + \"/cards\", {\n      method: \"POST\",\n      headers: this.headers,\n      body: JSON.stringify({\n        name: nameCard,\n        link: linkCard\n      })\n    }).then(res => {\n      return this._checkFetch(res);\n    });\n  }\n\n  deleteCard(cardId) {\n    //удаляем карточку пользователя\n    return fetch(this.baseUrl + \"/cards/\" + cardId, {\n      method: \"DELETE\",\n      headers: this.headers\n    }).then(res => {\n      return this._checkFetch(res);\n    });\n  }\n\n  addLike(cardId) {\n    //передаем лайки\n    return fetch(this.baseUrl + \"/cards/likes/\" + cardId, {\n      method: \"PUT\",\n      headers: this.headers\n    }).then(res => {\n      return this._checkFetch(res);\n    });\n  }\n\n  deleteLike(cardId) {\n    //удаляем лайки\n    return fetch(this.baseUrl + \"/cards/likes/\" + cardId, {\n      method: \"DELETE\",\n      headers: this.headers\n    }).then(res => {\n      return this._checkFetch(res);\n    });\n  }\n\n  patchAvatar(avatar) {\n    //передаем данные об аватаре\n    return fetch(this.baseUrl + \"/users/me/avatar\", {\n      method: \"PATCH\",\n      headers: this.headers,\n      body: JSON.stringify({\n        avatar: avatar\n      })\n    }).then(res => {\n      return this._checkFetch(res);\n    });\n  }\n\n}\n\nconst api = new Api({\n  baseUrl: \"https://nomoreparties.co/v1/cohort-28\",\n  headers: {\n    authorization: \"37a57185-a3c1-401e-aba8-ce2242497099\",\n    \"Content-Type\": \"application/json\"\n  }\n});\nexport { api };\nexport default Api;","map":{"version":3,"sources":["/Users/dmitrijcernysev/Desktop/projects/react-mesto-auth/mesto-react/src/utils/Api.js"],"names":["Api","constructor","options","baseUrl","headers","getUserData","fetch","then","res","_checkFetch","getCards","patchUserData","name","about","method","body","JSON","stringify","patchCard","nameCard","linkCard","link","deleteCard","cardId","addLike","deleteLike","patchAvatar","avatar","api","authorization"],"mappings":"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","sourcesContent":["//import {BASE_URL} from \"../utils/constants\"\n\nclass Api {\n  constructor(options) {\n    this.baseUrl = options.baseUrl;\n    this.headers = options.headers;\n  }\n\n  /*singUp(password, email) {\n    return fetch(`${BASE_URL}/signup`, {\n      method: 'POST',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        \"password\": password,\n        \"email\": email\n      })\n    })\n  }\n\n  singIn(password, email) {\n    return fetch(`${BASE_URL}/signin`,{\n      method: 'POST',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        \"password\": password,\n        \"email\": email\n      })\n    })\n  }\n\n  tokenCheck() {\n    return fetch(`${BASE_URL}/signin`, {\n      method: 'GET',\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\" : `Bearer ${''}`\n      }\n    })\n  }\n\n  _checkFetch(res) {\n    if (res.ok) {\n      return res.json();\n    } else {\n      return Promise.reject(`Ошибка: ${res.status}`);\n    }\n  }*/\n\n  getUserData() {\n    //получаем данные пользователя\n    return fetch(this.baseUrl + \"/users/me\", {\n      headers: this.headers,\n    }).then((res) => {\n      return this._checkFetch(res);\n    });\n  }\n\n  getCards() {\n    //получаем данные карточек\n    return fetch(this.baseUrl + \"/cards\", {\n      headers: this.headers,\n    }).then((res) => {\n      return this._checkFetch(res);\n    });\n  }\n\n  patchUserData(name, about) {\n    //передаем данные пользователя\n    return fetch(this.baseUrl + \"/users/me\", {\n      method: \"PATCH\",\n      headers: this.headers,\n      body: JSON.stringify({\n        name: name,\n        about: about,\n      }),\n    }).then((res) => {\n      return this._checkFetch(res);\n    });\n  }\n\n  patchCard(nameCard, linkCard) {\n    //передаем данные карточки созданные пользователем\n    return fetch(this.baseUrl + \"/cards\", {\n      method: \"POST\",\n      headers: this.headers,\n      body: JSON.stringify({\n        name: nameCard,\n        link: linkCard,\n      }),\n    }).then((res) => {\n      return this._checkFetch(res);\n    });\n  }\n\n  deleteCard(cardId) {\n    //удаляем карточку пользователя\n    return fetch(this.baseUrl + \"/cards/\" + cardId, {\n      method: \"DELETE\",\n      headers: this.headers,\n    }).then((res) => {\n      return this._checkFetch(res);\n    });\n  }\n\n  addLike(cardId) {\n    //передаем лайки\n    return fetch(this.baseUrl + \"/cards/likes/\" + cardId, {\n      method: \"PUT\",\n      headers: this.headers,\n    }).then((res) => {\n      return this._checkFetch(res);\n    });\n  }\n\n  deleteLike(cardId) {\n    //удаляем лайки\n    return fetch(this.baseUrl + \"/cards/likes/\" + cardId, {\n      method: \"DELETE\",\n      headers: this.headers,\n    }).then((res) => {\n      return this._checkFetch(res);\n    });\n  }\n\n  patchAvatar(avatar) {\n    //передаем данные об аватаре\n    return fetch(this.baseUrl + \"/users/me/avatar\", {\n      method: \"PATCH\",\n      headers: this.headers,\n      body: JSON.stringify({\n        avatar: avatar,\n      }),\n    }).then((res) => {\n      return this._checkFetch(res);\n    });\n  }\n}\n\nconst api = new Api({\n  baseUrl: \"https://nomoreparties.co/v1/cohort-28\",\n  headers: {\n    authorization: \"37a57185-a3c1-401e-aba8-ce2242497099\",\n    \"Content-Type\": \"application/json\",\n  },\n});\n\nexport { api };\nexport default Api;\n"]},"metadata":{},"sourceType":"module"}